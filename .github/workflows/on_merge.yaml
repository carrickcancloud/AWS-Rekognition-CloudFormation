name: Deploy Infrastructure & Process Images on Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy_and_process:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create S3 Bucket For Lambda Functions
        run: |
          echo "Starting S3 bucket creation..."
          create_output=$(aws s3 mb s3://${{ secrets.S3LAMBDABUCKET }} --region ${{ secrets.AWS_REGION }})
          echo "S3 bucket creation output: $create_output"
          echo "S3 bucket created successfully."
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Package Lambda Functions
        run: |
          echo "Packaging Lambda functions..."
          cd lambda
          zip beta.zip beta.py
          zip prod.zip prod.py
          echo "Lambda functions packaged successfully."

      - name: Upload Lambda Function Code to S3
        run: |
          echo "Uploading Lambda function code to S3..."
          upload_beta_output=$(aws s3 cp lambda/beta.zip s3://${{ secrets.S3LAMBDABUCKET }}/acmelabs-imageanalyzer/beta.zip)
          echo "Upload Beta output: $upload_beta_output"
          upload_prod_output=$(aws s3 cp lambda/prod.zip s3://${{ secrets.S3LAMBDABUCKET }}/acmelabs-imageanalyzer/prod.zip)
          echo "Upload Prod output: $upload_prod_output"
          echo "Lambda function code uploaded successfully."
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy CloudFormation Stack
        id: deploy_stack
        run: |
          echo "Starting CloudFormation stack deployment..."
          deploy_output=$(aws cloudformation deploy \
            --template-file cloudformation/template.yaml \
            --stack-name AcmeLabsImageAnalyzerStack \
            --parameter-overrides \
              AccountId=${{ secrets.AWS_ACCOUNT_ID }} \
              S3LambdaBucket=${{ secrets.S3LAMBDABUCKET }} \
              S3ImageAnalyzerBucket=${{ secrets.S3IMAGEANALYZERBUCKET }} \
              BetaDynamoDBTableName=${{ secrets.BETADYNAMODBTABLENAME }} \
              ProdDynamoDBTableName=${{ secrets.PRODDYNAMODBTABLENAME }} \
            --capabilities CAPABILITY_NAMED_IAM)
          echo "CloudFormation deployment output: $deploy_output"
          echo "CloudFormation stack deployed successfully."
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Update S3 Bucket Notification Configuration
        if: steps.deploy_stack.outcome == 'success'
        run: |
          echo "Updating S3 bucket notification configuration to trigger Lambda functions..."
          notification_output=$(aws s3api put-bucket-notification-configuration \
            --bucket ${{ secrets.S3IMAGEANALYZERBUCKET }} \
            --notification-configuration '{
              "LambdaFunctionConfigurations": [
                {
                  "LambdaFunctionArn": "arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:${{ secrets.BETALAMBDAFUNCTIONNAME }}",
                  "Events": ["s3:ObjectCreated:*"],
                  "Filter": {
                    "Key": {
                      "FilterRules": [
                        {
                          "Name": "prefix",
                          "Value": "rekognition-input/beta/"
                        },
                        {
                          "Name": "suffix",
                          "Value": "jpg"
                        },
                        {
                          "Name": "suffix",
                          "Value": "jpeg"
                        },
                        {
                          "Name": "suffix",
                          "Value": "png"
                        },
                        {
                          "Name": "suffix",
                          "Value": "gif"
                        },
                        {
                          "Name": "suffix",
                          "Value": "bmp"
                        },
                        {
                          "Name": "suffix",
                          "Value": "tiff"
                        },
                        {
                          "Name": "suffix",
                          "Value": "tif"
                        },
                        {
                          "Name": "suffix",
                          "Value": "webp"
                        }
                      ]
                    }
                  }
                },
                {
                  "LambdaFunctionArn": "arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:${{ secrets.PRODLAMBDAFUNCTIONNAME }}",
                  "Events": ["s3:ObjectCreated:*"],
                  "Filter": {
                    "Key": {
                      "FilterRules": [
                        {
                          "Name": "prefix",
                          "Value": "rekognition-input/prod/"
                        },
                        {
                          "Name": "suffix",
                          "Value": "jpg"
                        },
                        {
                          "Name": "suffix",
                          "Value": "jpeg"
                        },
                        {
                          "Name": "suffix",
                          "Value": "png"
                        },
                        {
                          "Name": "suffix",
                          "Value": "gif"
                        },
                        {
                          "Name": "suffix",
                          "Value": "bmp"
                        },
                        {
                          "Name": "suffix",
                          "Value": "tiff"
                        },
                        {
                          "Name": "suffix",
                          "Value": "tif"
                        },
                        {
                          "Name": "suffix",
                          "Value": "webp"
                        }
                      ]
                    }
                  }
                }
              ]
            }')
          echo "S3 bucket notification configuration output: $notification_output"
          echo "S3 bucket notification configuration updated successfully."
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Upload Images to S3
        if: steps.deploy_stack.outcome == 'success'
        run: |
          echo "Checking for images to upload..."
          if [ -d images ] && [ "$(find images -type f \( -name '*.jpg' -o -name '*.jpeg' -o -name '*.png' -o -name '*.gif' -o -name '*.bmp' -o -name '*.tiff' -o -name '*.tif' -o -name '*.webp' \))" ]; then
            echo "Uploading images to the S3 bucket for processing..."
            upload_images_output=$(aws s3 cp images/ s3://${{ secrets.S3IMAGEANALYZERBUCKET }}/rekognition-input/prod/ --recursive)
            echo "Image upload output: $upload_images_output"
            echo "Images uploaded successfully."
          else
            echo "No supported images found in the directory. Skipping upload."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
