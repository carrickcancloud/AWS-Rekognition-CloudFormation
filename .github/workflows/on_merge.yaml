name: Deploy Infrastructure and Process Images on Merge

on:
  pull_request:
    types: [closed]  # Trigger on pull requests that are closed
    branches:
      - main  # Trigger on merges targeting the main branch

jobs:
  deploy_and_process:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create S3 Bucket For Lambda Functions
        run: |
          # Create the S3 bucket for Lambda function code
          aws s3 mb s3://${{ secrets.S3LAMBDABUCKET }} --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Package Lambda Functions
        run: |
          # Create zip files for Lambda functions
          cd lambda
          zip beta.zip beta.py
          zip prod.zip prod.py

      - name: Upload Lambda Function Code to S3
        run: |
          # Upload the zip files to the S3 bucket
          aws s3 cp lambda/beta.zip s3://${{ secrets.S3LAMBDABUCKET }}/acmelabs-imageanalyzer/beta.zip
          aws s3 cp lambda/prod.zip s3://${{ secrets.S3LAMBDABUCKET }}/acmelabs-imageanalyzer/prod.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Deploy CloudFormation Stack
        id: deploy_stack
        run: |
          # Deploy the CloudFormation stack
          aws cloudformation deploy \
            --template-file cloudformation/template.yaml \
            --stack-name AcmeLabsImageAnalyzerStack \
            --parameter-overrides \
              AccountId=${{ secrets.AWS_ACCOUNT_ID }} \
              S3LambdaBucket=${{ secrets.S3LAMBDABUCKET }} \
              S3ImageAnalyzerBucket=${{ secrets.S3IMAGEANALYZERBUCKET }} \
              BetaDynamoDBTableName=${{ secrets.BETADYNAMODBTABLENAME }} \
              ProdDynamoDBTableName=${{ secrets.PRODDYNAMODBTABLENAME }} \
            --capabilities CAPABILITY_NAMED_IAM
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Update S3 Bucket Notification Configuration
        if: steps.deploy_stack.outcome == 'success'
        run: |
          # Update the S3 bucket notification configuration to trigger Lambda functions
          aws s3api put-bucket-notification-configuration \
            --bucket ${{ secrets.S3IMAGEANALYZERBUCKET }} \
            --notification-configuration '{
              "LambdaFunctionConfigurations": [
                {
                  "LambdaFunctionArn": "arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:${{ secrets.BETALAMBDAFUNCTIONNAME }}",
                  "Events": ["s3:ObjectCreated:*"],
                  "Filter": {
                    "Key": {
                      "FilterRules": [
                        {
                          "Name": "prefix",
                          "Value": "rekognition-input/beta/"
                        }
                      ]
                    }
                  }
                },
                {
                  "LambdaFunctionArn": "arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:function:${{ secrets.PRODLAMBDAFUNCTIONNAME }}",
                  "Events": ["s3:ObjectCreated:*"],
                  "Filter": {
                    "Key": {
                      "FilterRules": [
                        {
                          "Name": "prefix",
                          "Value": "rekognition-input/prod/"
                        }
                      ]
                    }
                  }
                }
              ]
            }'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Upload Images to S3
        if: steps.deploy_stack.outcome == 'success'  # Only run this if the stack was deployed successfully
        run: |
          # Upload images to the S3 bucket for processing
          aws s3 cp images/ s3://${{ secrets.S3IMAGEANALYZERBUCKET }}/rekognition-input/prod/ --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
